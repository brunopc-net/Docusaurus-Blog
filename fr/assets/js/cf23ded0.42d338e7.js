"use strict";(self.webpackChunkbrunopc_blog=self.webpackChunkbrunopc_blog||[]).push([[1375],{441:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/09/21/Outlive-your-project-bankruptcy","metadata":{"permalink":"/fr/blog/2023/09/21/Outlive-your-project-bankruptcy","source":"@site/blog/2023-09-21-Outlive-your-project-bankruptcy/index.md","title":"Outlive your project bankruptcy","description":"I\'m currently reading a fantastic book from Peter Attia: Outlive - The Science & Art of Longevity. The book emphasizes the fact that traditional medicine - Medicine 2.0 as he calls it - is shaped around the notion of healing at the very end of a disease lifespan, like the crew of the Titanic tried to save the ship at the last minute, even after being warned hours before the incident.","date":"2023-09-21T00:00:00.000Z","formattedDate":"21 septembre 2023","tags":[{"label":"health","permalink":"/fr/blog/tags/health"},{"label":"Software quality","permalink":"/fr/blog/tags/software-quality"},{"label":"Technical debt","permalink":"/fr/blog/tags/technical-debt"},{"label":"Automated tests","permalink":"/fr/blog/tags/automated-tests"}],"readingTime":9.975,"hasTruncateMarker":false,"authors":[{"name":"Bruno Pettersen-Coulombe","title":"Full stack Canadian: poutine cook & skating champion","url":"https://github.com/brunopc-net/","imageURL":"https://github.com/brunopc-net.png","key":"brunopc"}],"frontMatter":{"title":"Outlive your project bankruptcy","authors":"brunopc","enableComments":true,"image":"./Outlive-The-Science&Art-of-Longevity.webp","tags":["health","Software quality","Technical debt","Automated tests"]},"nextItem":{"title":"How to make your passion stick","permalink":"/fr/blog/2023/09/08/How-to-make-your-passion-stick"}},"content":"I\'m currently reading a fantastic book from [Peter Attia](https://twitter.com/PeterAttiaMD): [*Outlive - The Science & Art of Longevity*](https://peterattiamd.com/outlive/). The book emphasizes the fact that traditional medicine - Medicine 2.0 as he calls it - is shaped around the notion of healing at the very end of a disease lifespan, like the crew of the Titanic tried to save the ship at the last minute, even after being warned hours before the incident.\\n\\nUnfortunately, attempting to eliminate a rampant, evolving disease in its advanced stages significantly reduces the chances of recovery. Moreover, even in cases of complete healing, patients often find themselves in a state of suffering for the remainder of their lives. This is because the body, having deteriorated over decades, lacks the resilience to fully recover.\\n\\nPeter Attia questions the relevance of healing someone in the late stages of life if it only prolongs a state of pain for several years. What\'s the purpose of being alive if you can\'t pursue what you love? Is the achievement of extending life by another five years considered a medical success if it means enduring prolonged suffering confined to a bed during that time?\\n\\n[![Outlive - The-Science & Art of Longevity](./Outlive-The-Science&Art-of-Longevity.webp)](https://peterattiamd.com/outlive/)\\n\\nTraditional medicine has embraced a proactive approach in some of its practices. For instance, it advises people not to smoke at all rather than suggesting they quit smoking only after reaching 50 years of age, which would be rather absurd. However, there is still ample room for improvement by extending this philosophy to other diseases such as diabetes. Dr. Attia, who refers to this as *Medicine 3.0*, advocates for a significantly more proactive approach. In essence, it strives to prevent encountering icebergs altogether before there\'s a need for a catastrophic course correction.\\n\\nA lot can be done to help you live longer and, more importantly, live better for as long as possible. Exercise, nutrition, medications, and supplements are all covered in this cutting-edge book, which presents the latest medical evidence on how to stay as youthful and capable as you can. In other words, it explores how we can be the best version of ourselves for as long as possible.\\n\\nHow does this apply to software engineering?\\n\\n[Successful software projects are still a minority](https://vitalitychicago.com/blog/agile-projects-are-more-successful-traditional-projects/). More than half of the projects hit at least one iceberg.\\n\\nThere\'s a lot of \\"icebergs\\" in the software engineering world. Today, I will talk about two of them:\\n- [Strategy absence](#strategy-absence)\\n- [Technical debt](#technical-debt)\\n\\n## Strategy absence\\n\\n> Strategy without tactics is the slowest route to victory. Tactics without strategy is the noise before defeat.\\n>\\n> -- [**Sun Tzu**](https://en.wikipedia.org/wiki/Sun_Tzu), author of [The Art of War](https://en.wikipedia.org/wiki/The_Art_of_War)\\n\\nSoftware engineering is an optimization problem. You need to balance multiple software variables. Here\'s a list of the most important software qualities, that need to be considered:\\n- **Maintainability** - Defined by the easiness of code editing over time\\n- **Performance** or execution efficiency - Defined as resource usage or execution time\\n- **Reliability** - Defined as the availability (uptime) of the application\\n- **Accuracy** - Defined as returning the best result/answer to a request\\n- **Usability** - Defined as how simple it is for a new user to use the software without any guidance\\n- **Security** - Defined as its difficulty to hack\\n- **Compatibility** - Defined as how easy it is to connect it to another software/system\\n\\nEvery use case is different, and it\'s impossible to have all the best qualities in a product at once. A [Ford GT](https://hips.hearstapps.com/hmg-prod/images/2022-ford-gt-lm-edition-front-in-blue-1664914314.jpg) is not built to be convenient, a Dodge Caravan is not built to be fast. You could have a sports car more comfortable than the others, or have a minivan model faster than other minivans - but you\'ll never have a car faster than a sports car and more convenient than a minivan at the same time. \\n\\nYou have to choose. Choosing not to decide will result in reality imposing a mediocre standard all across the board. Therefore, the focus from the development team must align with the business requirements of the product built.\\n\\nAre we building a payment app? Availability will be the #1 factor, as being out-of-service would have tremendous consequences.\\n\\nAre we building a video game? Execution performance is critical.\\n\\nYou get the point, these are easy answers. However, for a lot of products, the strategy is a lot more nuanced than this. It will depend on the marketing strategy of the company and the marketing strategy of the product. Do you sell cutting edge technology? I would  prioritize performance. Social status? Look at Apple products: prioritize usability. Peace of mind? Make reliability and security #1 on the list. Durability? Emphasize on maintainability and compatibility.\\n\\nThe development team needs to understand all that, because how you define your product will have impacts on how the software should be built. In a lot of businesses, there\'s absolutely no communication between the marketing team and the software development team. Without guidance, everyone has a different idea of what qualities should be prioritized. The team will lack cohesion: at best, work done by some developers will be unuseful. At worst, developers will be counterproductive with each other.\\n\\nIt\'s like health. What does \\"healthy\\" means? It depends so much on the context. Even a Coca-Cola can be healthy - for example, if you\'re giving it to someone having a hypoglycemia crisis.\\n\\nA good health strategy should be personalized. Like Dr. Attia wrote in his book:\\n> This is where most people make a wrong turn. They want to take a shortcut, right to the tactics: *this* is what to eat (and not eat), *that* is how you should exercise, *these* are the supplements or medications you need, and so on. [...] Instead, I believe this is exactly where we need to hit pause and take a step back, lest we skip the most important step in the process: the strategy.\\n\\nYes, there are good coding practices and conventions, but everything has downsides. \\"Good practices\\" are not absolute, they make sense only for a particular context. For example:\\n- Adding security for a threat that doesn\'t exist is throwing money out of the window. This could in itself prevent you from adding security for a threat that is very likely to occur.\\n- Emphasis on \\"perfect code\\" for a temporary MVP will delay time to market, for a codebase that will most likely exist for a couple of weeks at worst. If you put too much time into the best practices at this stage, you may delay the time to market and sink the ship.\\n\\nDoes your team has a clear strategy?\\n\\n## Technical Debt\\n\\nIn most engineering fields, there\'s execution wear involved. Let\'s take a car motor: carbon deposits, rust, friction, metal wear will make the mechanical parts less and less efficient, until the motor dies. Because of this, motor maintenance will prolong the lifespan of the car.\\n\\nLet\'s say you change spark plugs or replace oil on your car. You are improving its execution (better ignition, better fuel economy, etc.). Moreover, because you put new parts, the lifespan of the motor is extended by your actions. There\'s less risk involved in replacing the spark plugs or changing the oil then there is to not do it. If you do it regularly, motor can last 200,000+ miles. If you don\'t do maintenance, it could blow up after 40,000 miles, or worst.\\n\\nSoftware engineering is unique in the sense that code doesn\'t wear out. Computers are digital: therefore, results are either exact or wrong. Code never lies: it will execute exactly how you wrote it. If the code stays the same, the result and the execution cost will be the same from the 1st to the 1,000,000th execution. No need to clean or to replace parts. Contrary to other fields, time will not change the quality of the result.\\n\\nEvery time you edit the code, you have to change the already existent codebase that is, by definition, describing an exact behavior. So every time you\'re touching it, you pose the risk of completely ruin the end result of the algorithm. That\'s why developers are often afraid to edit the code. If they have to implement a new feature, they will often do it outside of the existing codebase. The problem with that? Duplicated logic, exponential code growth: the code will complexify more and more as time pass. This is our second iceberg: [technical dept](https://en.wikipedia.org/wiki/Technical_debt).\\n\\n> Shipping first time code is like going into debt. A little debt speed development so long as it is paid back promptly with a rewrite... The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as interest on that debt. Entire engineering organizations can be brought to a standstill under the debt load of an unconsolidated implementation.\\n>\\n> -- [**Ward Cunningham**](https://en.wikipedia.org/wiki/Ward_Cunningham), co-author of the [Manifesto for Agile Software Development](https://en.wikipedia.org/wiki/Agile_software_development#The_Agile_Manifesto)\\n\\nThe complexity can become so high that it can eventually freeze the entire project, where no one can understand what\'s going on anymore.\\n\\nIn summary, we can conclude that:\\n- In most engineering fields wear naturally increase with time\\n- In software engineering, wear (or technical debt) comes from human \\n\\nMultiple solutions can resolve this problem:\\n- The software team need to understand the importance of \\"cleaning the house\\" every time a feature has been done, even if it\'s not sexy. Shipping the feature in production, more often than not, doesn\'t mean the work is done. The code also requires a cleanup after that.\\n- Automated tests act like an insurance. If something breaks, it will be caught and it will be shown where it\'s breaking. That way, the team will be far more comfortable cleaning the house. Automated tests prevent problems on their own, but have another upside to them: developers will also be more comfortable working with legacy systems, so deeper their expertise will be. That is another reason why automated tests mean faster development time and fewer errors.\\n- The business department needs to be conscious that putting pressure on the software team multiple times in a row to deliver faster will increase the technical debt. It can be done, but it will be at the expense of future productivity.\\n\\nBe aware of people that want a promotion as quick as possible. Like a government that borrow money to reduce taxes, they may favor the short-term productivity of the project by sacrificing the future vitality of the project.\\n\\n## Have a double T-shape developper\\n\\nThese icebergs (strategy absence and technical debt) can easily ruin your project solvency, even to the point it can threaten your organization profitability. They have one thing in common: a lack or understanding between the software team and the business team. I\'ve seen so many organizations with business and software departments not understanding and putting the blame on each other, and frankly, both were right in their recriminations. \\n\\nThis is where a project manager that knows the inside-and-out of software development AND that has a business expertise is so precious. That person will alloy the business team to communicate in business terms (marketing strategy, upcoming finance delays, etc.) without worrying about managing a software team. After that, this interpret will be able to translate these needs into a complete software strategy, while teaching the business teams on the inevitable software hurdles that will occur along the way (like technical debt).\\n\\nI emphasize that it has to be one individual. Otherwise, what\'s the point? Having two people for this role doesn\'t solve the problem: it would be like hiring a duo of a French teacher that doesn\'t speak English and English professor that doesn\'t speak French to translate an English book into French. Good luck with that.\\n\\nA product owner, a scrum-master or a software project manager should know both worlds inside and out. Unfortunately, this job is sometimes occupied with someone who didn\'t ever write software at all, or sometimes, that doesn\'t have any background in marketing.\\n\\nSounds familiar?"},{"id":"/2023/09/08/How-to-make-your-passion-stick","metadata":{"permalink":"/fr/blog/2023/09/08/How-to-make-your-passion-stick","source":"@site/blog/2023-09-08-How-to-make-your-passion-stick/index.md","title":"How to make your passion stick","description":"Fuel your passion","date":"2023-09-08T00:00:00.000Z","formattedDate":"8 septembre 2023","tags":[{"label":"Self-Development","permalink":"/fr/blog/tags/self-development"},{"label":"Motivation","permalink":"/fr/blog/tags/motivation"}],"readingTime":11.535,"hasTruncateMarker":false,"authors":[{"name":"Bruno Pettersen-Coulombe","title":"Full stack Canadian: poutine cook & skating champion","url":"https://github.com/brunopc-net/","imageURL":"https://github.com/brunopc-net.png","key":"brunopc"}],"frontMatter":{"title":"How to make your passion stick","authors":"brunopc","enableComments":true,"image":"./fuel-your-passion.webp","tags":["Self-Development","Motivation"]},"prevItem":{"title":"Outlive your project bankruptcy","permalink":"/fr/blog/2023/09/21/Outlive-your-project-bankruptcy"},"nextItem":{"title":"After-hours work: red flag \ud83d\udea9","permalink":"/fr/blog/2023/09/06/After-hours-work-is-a-red-flag"}},"content":"![Fuel your passion](./fuel-your-passion.webp)\\n\\nI was listening [to a podcast featuring my friend Olivier Jean](https://livingrichly.me/the-champion-mindset/), gold medalist during the 2010 Olympics in Vancouver. Towards the end, the host asked him a question that gets asked a lot: How do I find my passion? How do I maintain it enough so I can keep going on?\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/6bttHdNJIcs?si=CZabeQbghfAZKnJz&amp;clip=Ugkxo1jeBGjZBnxyWnjQKgo4UeIaaMhApENi&amp;clipt=ENzObxi8o3M\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe><br/><br/>\\n\\nHaving dedicated my life to speed skating for 15 years - I can relate to that feeling of being lost after a big journey that was ended. Especially between the years 2014 to 2020, it was a very challenging time for me. Looking back now, I definitely had a depression or some sort of existential crisis at one point.\\n\\nIn that time I tried a lot to find answers. Since I read a lot about that topic, I\'d like to write what I understand on the topic, and what worked for myself.\\n\\nFirst, a bit of theory. [Based on psychology papers, there are two types of passion](https://www.sciencedirect.com/science/article/abs/pii/S1469029217300705?via%3Dihub):\\n- Harmonious passion\\n- Obsessive passion\\n\\n### Harmonious passion\\n\\nHarmonious passion is an internal one: you\'re motivated about practicing an activity because it brings you joy. Here we seek progress for itself: we want to progress just for the energy it brings you back after a great session.\\n\\nIt is based on a paying mindset. We pursue it just because we feel better doing it, and we are more mentally energized after it than before.\\n\\nPeople that are more into harmonious passion tend to identify themself as participants of a bigger thing. They will say: \\"I\'m a cyclist.\\" \\"I\'m a hockey player.\\"\\n\\nHarmonious passion is often viewed as childist or superficial, and I\'ll never be able to say enough how wrong this is. Harmonious passion is the one that will keep you going when you keep improving but you can\'t get results. Let\'s say you\'re running with the intention in beating [Eliud Kipchoge](https://fr.wikipedia.org/wiki/Eliud_Kipchoge) in the next Marathon World Championships. Sound ridiculous, isn\'t it?\\n\\nYou can enjoy yourself the activity for itself, for your own progress. You\'ll be very happy about your results in you retract 10 minutes on your marathon time, for example. That\'s harmonious passion. \\n\\nIt\'s the most sustainable passion because you can\'t always win. In fact, even elite athletes loose more then they win. [Novak Djokovic, since his first grand slam in 2008, has not won the grand slam tournament 56% of the time](https://en.wikipedia.org/wiki/Novak_Djokovic_career_statistics) - and I\'m talking here about one of the most dominant athlete of all time.\\n\\nWith hamonious passion, as your focus is to play, people will be happy to practice with you, so it\'s the passion that will keep you engaged with your teammates, coaches, mentors, colleagues or coworkers.\\n\\n[Firas Zahabi](https://en.wikipedia.org/wiki/Firas_Zahabi), head coach of [Georges St-Pierre](https://en.wikipedia.org/wiki/Georges_St-Pierre), said at the Joe Rogan podcast that it\'s a joy to spare with him because he\'s having a lot of fun during his training. He\'s not trying to crush everyone to show that he\'s the best: that is for the fight night only. That relaxed attitude is an important factor on why he\'s been able to train with a lot of talented athletes all over the world, but also a factor on why he\'s still so healthy today, physically and mentally.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/_fbCcWyYthQ?si=vmo1zTw64wH638Jo\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe><br/><br/>\\n\\nI can personally give yourself a good exemple of harmonious passion that I experienced last summer.\\n\\nFirst karting race of the season 2023, I was absolutely flying during the race, well challenging the top ten racers. I was so fast I could make driving mistakes and catch up with the front runners, which shouldn\'t happen. I learned I was the third fastest on the track at that specific moment.\\n\\nThen another racer hit me from behind during a fast corner. My race was over.\\n\\nMy reaction? I was so happy. Not about the crash, but about my weekend. I was able to extract more speed than my last race at the same track - and it was already my best track ever based on results.\\n\\nI didn\'t care about the end result - I was happy about my improvement. It motivated even more for the upcoming races. That is the sign of a solid harmonious passion.\\n\\n### Obsessive passion\\n\\nObsessive passion is linked to outside stimuli. If you\'re motivated about money, medals, winning, success, getting famous, etc. - You\'re in that category. It is based on what you have to gain from society to you. It is based on a \\"work\\" mindset. As you\'re not doing something for itself but for what has to be gained from it, it is linked to perseverance, tenacity. People with obsessive passion will tend to continue even if the practice of the activity has negative consequences in their lives. People more into obsessive passion will also tend to confound their own value with their results - they will see themselves as champions or losers. You can understand how\'s that mental rollercoaster is very hard on the mental side.\\n\\nHere\'s some talk associated with obsessive passion:\\n- \\"No pain, no gain\\"\\n- \\"This is serious\\"\\n- \\"If we wanted to have fun, we would have gone skiing\\" \\n\\nToo much obsessive passion can be detrimental for the well-being, so you have to make sure that your harmonious passion - which is positive for your well-being - is strong enough on to support your mental health if you want to crank up obsessive passion. Otherwise, you\'ll be trading performance at the cost of mental health. It can work on the short term, but you\'ll blow up eventually.\\n\\n\\nIn summary, to build yourself a model, you need to:\\n1. Know yourself first\\n1. Find an activity that matches your personality\\n1. Implement a good strategy for improvement\\n\\n## 1. Know yourself first\\n\\nHow does your brain - your personality and your emotions - work?\\n\\nThe most advanced scientific model for personality is the [Big 5 Personality model](https://www.verywellmind.com/the-big-five-personality-dimensions-2795422). Basically, there are five dimensions to someone\'s personality:\\n1. Extraversion, the degree of how much someone gains energy from social interactions\\n1. Neuroticism, the degree of how much someone tends to experience negative emotions\\n1. Conscientiousness, the degree of how someone tends naturally to execute the tasks they are supposed to do\\n1. Agreeableness, the degree of how much someone tends to pleasure other people\\n1. Openness, the degree of brain ability to link between concepts or think about abstract ideas.\\n\\nKnowing yourself is critical,  because it will predict how\'s a particular activity is correlated to improved mood on yourself.\\n\\n## 2. Find an activity that matches your personality\\n\\nFor example, lower than average agreeableness people should seek competitions. It\'s an activity that will reward only the best ones. As less agreeable people tend to think in a selfish \\"What\'s in it for me\\" way, a competition is a great carrot for them.\\n\\nPeople high in openness will be well fulfilled in activities with high creativity involved (arts, engineering). Basically, any type of activity where you need to think outside the box will be a good fit for them.\\n\\nIf you\'re very high in extraversion, you should choose something where you\'ll encounter a lot of people (like event organization or sales). If you\'re more of an introvert, you might find individual activities more enjoyable.\\n\\nPersonally, I have\\n- A very high openness (I like to find new solutions, discuss complex problems). That\'s why I love engineering, science and philosophy.\\n- Over then average conscientiousness (When I have an idea, I\'m very prone to work on it until I realize my goal)\\n- Over then average extraversion - I need to see people to refill my energy levels\\n- Lower than average agreeableness (I love competition) and neuroticism (I stay calm even in stressful situations). This is a perfect match for my sports that are dangerous racing sports - Short track speed skating, Cycling and Karting.\\n\\n## 3. Have a good strategy for improvement\\n\\n### Build yourself a passion model.\\n\\nBased on your personality, you need to find the right balance of harmonious passion and obsessive passion. Since everyone is different, I think everyone has to build their own passion model - and that is what is so difficult about it. For example, I would hypothesize that someone with high neuroticism won\'t be able to stack as much obsessive passion as someone with low neuroticism. That\'s a journey you have to do yourself, as both passion types have their strengths.\\n\\nHarmonious passion is a great foundation for success, because you will crave the practice of the activity naturally. Without harmonious passion, you\'ll never be able to be in the flow - a mental state where you\'re so immersed into the task that everything else disappears. The flow will make you experience your greatest level of performance at that specific moment. To be in it, you have to be detached from the outcome: that means not thinking about your result.\\n\\nHowever, this is a fragile passion as it will disappear when no progress is occurring. \\"Progress\\" here is defined on whatever you gain internally from it (competency, health, great friends). \\n\\nLet\'s say you\'re in a three-month-long training phase and you don\'t have any way to see if you\'re making progress yet. You don\'t know if you\'re getting better, you don\'t feel if your health is better, and you have to train alone. This is what is happening to me during the winter months while I train my cycling on Zwift. It is then very difficult to rely on harmonious passion during this 3-month period because harmonious passion will just die. So I just discipline myself, even if the results are not perceptible. And to discipline myself, I\'m constantly tinking about my upcoming races I\'d like to win.\\n\\nI won\'t necessarily win, I\'m aware of this. I continue training in the winter even if I\'m not enjoying it - this is because I know this is temporary and I know my level will eventually rise when I am able to cycle outdoors again. When that happens, seeing the results, my harmonious passion explodes in joy, even if I didn\'t win - just seeing my improvement is enough.\\n\\nObsessive passion greatest strength is to fill the gaps when the harmonious passion is gone. As it is the passion associated with outside stimulus, it will make you practice even when you\'re not feeling it as you *want* that result. When you have to discipline yourself, this is the type of passion that will keep you on track. \\n\\nHarmonious passion will come back to even greater levels when you improve yourself. Improvement is essential, though: this is why having a working training plan is absolutely essential. Relying on obsessive passion temporarily will work as long as you\'re getting results at the end. Otherwise, you\'ll be disgusted that all this work was done for nothing - and it\'s very likely that you will give up.\\n\\n### Have a pragmatic (and efficient) plan\\n\\nListen to wise people. Have a (good) coach if you can. They will prevent you from deadly traps. If you fall into a hole (making a mistake that stops your progress), you may never recover.\\n\\nThe thing I learned while reading Guillaume Delude \\"I am a gold digger\\" book is that progress is the fuel you need for further practice. See, the brain knows how limited your energy supply is. He doesn\'t want you to waste your energy for something that\'s bad for you. If your brain sense that you put energy that doesn\'t come back one way or another (by making progress, social interaction, etc.), you will eventually lose interest for that activity. If you ignore your brain and still try to push too hard, you\'re on the path of depression or burnout.\\n\\nYou need to figure out a way to build yourself a virtuous cycle. Where practice brings you motivating progress, like having a good financial investment. This increased motivation will lead you to practice more. That increased practice will lead to even bigger results.\\n\\nTo build the circle, it\'s absolutely critical that the actions you take are good one and not lost energy. This is where quotes like \\"No pain, no gain\\" can be toxic. The mentality is great if it\'s balanced and if you already have a working strategy, but otherwise, you will burn yourself.\\n\\nThe nuance between positive and toxic perseverance? The profitability of your efforts. If you progress, it\'s positive. If you put in a lot and you\'re stagnating, it\'s becoming toxic.\\n\\nThe same way people are sometimes in toxic relationships because it gives them short bursts of intense euphoria, you can also have toxic passions (overly obsessive ones). Passion can burn you, whether it is for someone or for an activity.\\n\\n## Build your passions, plural\\n\\n\\"Finding your passion\\" is a bit misleading, because it\'s a process you mainly need to build, opposed as discovered, the same way that you build love over time in a healthy relationship.\\n\\nFinally, I want to emphasize that after you become good at building these virtuous cycles, you can build multiple passions at the same time. Passion doesn\'t mean you can\'t have two, or three, or four! It\'s up to you how many you want.\\n\\nWhen you understand the process, you have laid out the foundation of happiness in every aspect of your life: in love, for your family, at work, for your hobbies, and more.\\n\\n## Good reads  on the topic\\n\\n- [Je suis un chercheur d\'or: Les m\xe9canismes de la communication et des relations humaines](https://www.amazon.ca/-/fr/Guillaume-Dulude/dp/2761950054) - French\\n\\n- [Champion dans la t\xeate: Comprendre et s\'inspirer de la psychologie des champions](https://www.amazon.ca/Champion-dans-t%C3%AAte-Comprendre-psychologie/dp/2761946480/ref=sr_1_1?crid=L5J7MW04OC3F&keywords=champion+dans+la+t%C3%AAte&qid=1694203556&s=books&sprefix=champion+dans+la+t%C3%AAt%2Cstripbooks%2C102&sr=1-1) - French\\n\\n- [The Motivation Myth: How High Achievers Really Set Themselves Up to Win](https://www.amazon.ca/Motivation-Myth-Achievers-Really-Themselves/dp/0399563768)\\n\\n- [So Good They Can\'t Ignore You](https://www.amazon.ca/Good-They-Cant-Ignore-You/)"},{"id":"/2023/09/06/After-hours-work-is-a-red-flag","metadata":{"permalink":"/fr/blog/2023/09/06/After-hours-work-is-a-red-flag","source":"@site/blog/2023-09-06-After-hours-work-is-a-red-flag/index.md","title":"After-hours work: red flag \ud83d\udea9","description":"Job description","date":"2023-09-06T00:00:00.000Z","formattedDate":"6 septembre 2023","tags":[{"label":"Deployment-optimisation","permalink":"/fr/blog/tags/deployment-optimisation"},{"label":"Blue\u2013Green","permalink":"/fr/blog/tags/blue-green"},{"label":"Canari","permalink":"/fr/blog/tags/canari"},{"label":"Automation","permalink":"/fr/blog/tags/automation"},{"label":"DevOps","permalink":"/fr/blog/tags/dev-ops"}],"readingTime":4.13,"hasTruncateMarker":false,"authors":[{"name":"Bruno Pettersen-Coulombe","title":"Full stack Canadian: poutine cook & skating champion","url":"https://github.com/brunopc-net/","imageURL":"https://github.com/brunopc-net.png","key":"brunopc"}],"frontMatter":{"title":"After-hours work: red flag \ud83d\udea9","image":"20k-vs-200k-meme.webp","authors":"brunopc","enableComments":true,"tags":["Deployment-optimisation","Blue\u2013Green","Canari","Automation","DevOps"]},"prevItem":{"title":"How to make your passion stick","permalink":"/fr/blog/2023/09/08/How-to-make-your-passion-stick"},"nextItem":{"title":"Do you really need the complete stack?","permalink":"/fr/blog/2023/07/25/Do-you-really-need-the-complete-stack"}},"content":"import EmployeeHopesSvg from \'./employees-hopes-McKinsey.svg\';\\n\\n![Job description](./Job-description.PNG)\\n\\nI was recently proposed a position as a Senior Software Engineer. Whether I\'ll get the job or not, I want to talk to you about something that never smells good: after-hours work. This is not for a startup or a product that rarely gets deployed; I\'m talking about a multibillion company that will need to deploy countless times in the future. This primitive, obsolete, and outdated approach is how many companies still operate: waiting until nobody can use our platform/service, then deploying it manually.\\n\\n## Why after-hour deployments are bad?\\n\\nFor two main reasons:\\n- [Repulsive for the best candidates](#repulsive-for-the-best-candidates)\\n- [Recurring fees](#recurring-fees)\\n\\n### Repulsive for the best candidates\\n\\nAfter the Covid-19 pandemic, [people have more expectation about their working conditions](https://insights-north-america.aon.com/enhancing-wellbeing/changing-expectations-how-the-pandemic-has-affected-what-employees-want-from-their-benefits-programs). For example, [51% of people are hoping for a better work-life balance](https://www.weforum.org/agenda/2021/05/employers-pandemic-covid-19-mental-health/). And they should be: it is the reasonable reality to expect given what technology permits in 2023.\\n\\n<a href=\\"https://www.mckinsey.com/capabilities/people-and-organizational-performance/our-insights/what-employees-are-saying-about-the-future-of-remote-work\\">\\n    <EmployeeHopesSvg />\\n</a>\\n\\nI\u2019m sure, as a responsible employer, that you are always searching for ways to improve the work-life balance of your employees, which, in turn, will give you the opportunity to attract the most competent candidates. However, all these efforts from your organization can be thrown out the window if you ask for your employees to do overtime time and time again. Manual deployment is a mentally taxing task for your employees - it drains mental energy without any real contribution to expertise.\\n\\nYou\u2019ll never be able to recruit A-grade employees that way. And if A grade employees avoid your organization, guess what? B-level employees that are looking to improve themselves will lack the guidance they need. What does employees do when they lose their momentum forward? They start looking elsewhere. So you\u2019ll be left with barely average C-grade employees.\\n\\n### Recurring Fees\\n\\nLet\u2019s say you need 3 hours of work, every month, with 8 people in the team, to deploy outside of operation hours, with a mean hourly cost of $60 x\xa01.5 = $80 an hour as it\u2019s overtime.\\n\\n$80 x 3 hours \xd7\xa08 employees x\xa012 deployments/year = $23,000/year.\\n\\nNow let\u2019s say you have 10 teams that are deploying like that, costs really adds up\u2026\\n\\nOf course, for some specific situation (POC, MVP, deployments 1\u20132 times a year, etc.), automated deployment doesn\u2019t make sense. For the rest of the projects, the cost of not doing it is far more important.\\n\\nMoreover, the more tasks the project requires, the more people you\u2019ll need. With the labor shortage, do you really think it\u2019s a good idea?\\n\\n## What are the advantages of live automated deployments?\\n\\n1. \ud83e\udd11 Avoiding paying overtime\\n2. \ud83d\ude4c Team spirit up: you\u2019ll have a big relief from your employees. Yes, they make more money with overtime, but do you think they really like that? \\n3. \ud83d\ude0e You\u2019ll be able to attract and retain the best candidates as they will be able to work at the level or their competence.\\n4. \ud83d\udc4c Ability to roll back to the previous version in a snap if anything goes wrong.\\n5. \ud83d\udca8 Faster deployments mean your team can ship new features quicker\\n6. \ud83d\ude4f More reliable deployments, as the critical human error will be out of the equation\\n7. \u23f0 As your deployment is not impacting availability, you can stay up 24/7\\n\\nAutomated deployments are one of the pillars of [DevOps](https://en.wikipedia.org/wiki/DevOps). If you can\u2019t deploy automatically, you can\u2019t pretend you\u2019re a DevOps team.\\n\\n## How to get started?\\n\\nTo deploy live, you\u2019ll need some expertise for the deployment techniques below:\\n\\n- A [*Blue-Green* deployment](https://docs.aws.amazon.com/whitepapers/latest/overview-deployment-options/bluegreen-deployments.html) is one deployment where you deploy the new version, without any pressure, on a duplicated infrastructure. You have all the time you need to, because guess what? It has zero impact on the real production yet. You can then run all the tests you need directly on the production code. As it is the exact same infrastructure that will be used in production, the replication will me perfect, so you\u2019ll avoid the \\"it works on my machine\\" situation. When your tests are done, you just have to redirect your traffic - via a [proxy server](https://en.wikipedia.org/wiki/Proxy_server) - to the new infrastructure. As this step takes literally a few milliseconds, it can be done live without service downtime.\\n\\n![It works on my machine comic](./It-work-on-my-machine.webp)\\n\\n- A [*Canari* deployment](https://cloud.google.com/deploy/docs/deployment-strategies/canary) is a even more evolved technique where you release your new production for a subset of your user base - it can be 1%, 5%, 10%, 25%, whatever you want. Basically, you\u2019re testing the new version from a user standpoint before rolling it out to all users.\\n\\nBoth methods give you the possibility to deploy during operation hours. It you\u2019re new to this, I suggest you start with Blue-Green, as it is easier to implement.\\n\\nThis is a big cultural shift, yes. But I suggest you calculate the upside of it. How many deployments a year you\u2019re doing? How much does it cost you in overtime work?"},{"id":"/2023/07/25/Do-you-really-need-the-complete-stack","metadata":{"permalink":"/fr/blog/2023/07/25/Do-you-really-need-the-complete-stack","source":"@site/blog/2023-07-25-Do-you-really-need-the-complete-stack/index.md","title":"Do you really need the complete stack?","description":"Useful or useless?","date":"2023-07-25T00:00:00.000Z","formattedDate":"25 juillet 2023","tags":[{"label":"Wordpress","permalink":"/fr/blog/tags/wordpress"},{"label":"PHP","permalink":"/fr/blog/tags/php"},{"label":"Jekyll","permalink":"/fr/blog/tags/jekyll"},{"label":"Javascript","permalink":"/fr/blog/tags/javascript"},{"label":"React","permalink":"/fr/blog/tags/react"},{"label":"SSG","permalink":"/fr/blog/tags/ssg"},{"label":"Docusaurus","permalink":"/fr/blog/tags/docusaurus"}],"readingTime":3.52,"hasTruncateMarker":false,"authors":[{"name":"Bruno Pettersen-Coulombe","title":"Full stack Canadian: poutine cook & skating champion","url":"https://github.com/brunopc-net/","imageURL":"https://github.com/brunopc-net.png","key":"brunopc"}],"frontMatter":{"title":"Do you really need the complete stack?","authors":"brunopc","tags":["Wordpress","PHP","Jekyll","Javascript","React","SSG","Docusaurus"],"image":"./useful-or-useless.webp","enableComments":true},"prevItem":{"title":"After-hours work: red flag \ud83d\udea9","permalink":"/fr/blog/2023/09/06/After-hours-work-is-a-red-flag"},"nextItem":{"title":"Welcome, folks","permalink":"/fr/blog/welcome"}},"content":"![Useful or useless?](./useful-or-useless.webp)\\n\\nWhile thinking about this blog, my initial plan was to use [Wordpress](https://wordpress.com/). After all, I was familiar with the platform, having worked with PHP in the past. People generally dislike unnecessary changes, and I\'m no alien. However, upon reflecting on my past experiences with WordPress, I realized it had its drawbacks. It wasn\'t free since I had to purchase a web hosting plan and manage the hosting myself. Additionally, there were frequent updates and security vulnerabilities to patch. Although it seemed wonderful initially, over time, the operational burdens increased significantly. Eventually, I stopped blogging because it became costly in terms of both money and energy.\\n\\nAfter this reflection, I began searching for alternatives. Was there a better solution out there? That\'s when I came across [Jekyll](https://jekyllrb.com/) and decided to experiment with it. It appeared to be a great idea: no databases, no updates to worry about, just plain text content. The ability to post for free on GitHub Pages, with the option of a custom domain and without mandatory ads, was very appealing. It was simple, easy, and extremely stable. The very idea of just having to write plain-text Markdown files felt like using my new 1Zpresso k-Max grinder after years of using a cheap grinder from Amazon. It just worked, and marvelously well.\\n\\nThe idea of static site generators (SSGs) was so impressive that other SSGs started emerging. One such SSG was Docusaurus, based on the popular front-end framework React. Since I was more familiar with JavaScript/React than Ruby, I felt that React, as an HTML front-end framework on its own, integrated perfectly as an SSG. Moreover, the fact that Docusaurus was backed up by Meta gave me confidence that it would be supported for a long time. I decided to give Docusaurus a try. \\n\\n## CTCO - Cut the crap out\\n\\nAs humans, we can be peculiar at times. We try to solve one problem after another, but often, in doing so, we create more problems. Back then, I didn\'t need a database. Yes, it may have been \\"better\\" and \\"more technologically advanced\\" to use a DB instead of plain text HTML. However, in using a backend to manage the database, I needed a hosting plan. That hosting plan cost me money, which meant I had to work to pay for it. Essentially, I was working to buy myself more work. I did learn a lot, but I could have achieved more of what I really wanted at that time: establishing an online presence.\\n\\nHaving gained some experience in the industry now, I can say that many people tend to think that more is better. And it\'s not exclusive to software builders and managers. Asset manager Ben Carlson nailed it in his book [A Wealth of Common Sense](http://www.amazon.ca/gp/product/1119024927/ref=as_li_ss_tl?ie=UTF8&camp=15121&creative=390961&creativeASIN=1119024927&linkCode=as2&tag=canacoucpota-20). Dan Bortolotti explains it well in his Canadian Couch Potato blog, in the post [*Why Simple Is Still a Hard Sell*](https://canadiancouchpotato.com/2016/01/25/why-simple-is-still-a-hard-sell/):\\n\\n> Ben Carlson [\u2026] reveals that he\u2019s made the same discovery: investors resist simplicity. Yet Carlson believes it\u2019s the right solution for most of us. \u201cI\u2019ve spent my entire career working in portfolio management,\u201d he writes. \u201cThis experience has taught me that less is always more when making investment decisions. Simplicity trumps complexity. Conventional gives you much better odds than exotic.\u201d\\n\\n> A lot of complexity is just BS. \u201cComplexity tends to be the default option that gets used to persuade investors to buy unnecessary investment products,\u201d Carlson writes, \u201cwhile the vast majority of people really just need to understand more conventional options to succeed.\u201d When fund companies, media gurus and advisors peddle clever-sounding strategies, they\u2019re creating \u201can illusion of intelligence and control.\u201d\\n\\nI want to point out the fact that Software Engineering is still very immature. According to the [Standish Group Chaos Report 2020](https://vitalitychicago.com/blog/agile-projects-are-more-successful-traditional-projects/), only 42% of agile projects and 13% of Waterfall projects were successful. In summary, the chances of a software project success (based on time, budget, targets, goals, value, and user satisfaction) are still less than half, even when using agile methodologies. And the more you simplify your solution, the lower the chances of complications.\\n\\nWhat is your real goal? Do you want an illusion of control, or resolving the problem?\\n\\nPersonally, I choose the latter."},{"id":"welcome","metadata":{"permalink":"/fr/blog/welcome","source":"@site/blog/2023-07-24-Welcome.md","title":"Welcome, folks","description":"I was contemplating for a while about creating my own blog.","date":"2023-07-24T00:00:00.000Z","formattedDate":"24 juillet 2023","tags":[],"readingTime":1.205,"hasTruncateMarker":false,"authors":[{"name":"Bruno Pettersen-Coulombe","title":"Full stack Canadian: poutine cook & skating champion","url":"https://github.com/brunopc-net/","imageURL":"https://github.com/brunopc-net.png","key":"brunopc"}],"frontMatter":{"slug":"welcome","title":"Welcome, folks","authors":"brunopc","enableComments":true},"prevItem":{"title":"Do you really need the complete stack?","permalink":"/fr/blog/2023/07/25/Do-you-really-need-the-complete-stack"}},"content":"I was contemplating for a while about creating my own blog.\\n\\nI like to write, as this form of communication is still the best we have to express an idea. Yes, spoken words have been increasing in popularity since podcasting became a thing. While I agree with Jordan Peterson that [spoken words are now more powerful then ever](https://www.youtube.com/watch?v=Dm9FaxV_RN4), written words still have advantages - they are much better indexed by web crawlers. Additionally, as you can refine them multiple times before publishing, words will always be the most precise and structured way to express an idea. This is especially useful when you\'re in a very detailed field like programming.\\n\\nA lot of developer blogs are written solely for other developers - a blog where you can find great code snippets, tutorials and such. However, developper blog targeted for a general audiance is far more rare. I think it\'s an angle that deserve to be better exploited - I\'ve seen countless exemple of miscommunication between developper, managers, HR or marketing advisors. Even though Software Engineering have been around for some decades now, I think it\'s still pretty immature as for the understanding of the field by related departments. There\'s a lot of people that are lacking some knowledge to optimise their work with software teams.\\n\\nThis is the beginning of a journey. I don\'t know where it\'s gonna take me but I\'m pretty sure it\'s gonna be great!\\n\\nLong live the internet."}]}')}}]);