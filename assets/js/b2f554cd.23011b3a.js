"use strict";(self.webpackChunkbrunopc_blog=self.webpackChunkbrunopc_blog||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/09/06/After-hours-work-is-a-red-flag","metadata":{"permalink":"/blog/2023/09/06/After-hours-work-is-a-red-flag","source":"@site/blog/2023-09-06-After-hours-work-is-a-red-flag/index.md","title":"After-hours work: red flag \ud83d\udea9","description":"Job description","date":"2023-09-06T00:00:00.000Z","formattedDate":"September 6, 2023","tags":[{"label":"Deployment-optimisation","permalink":"/blog/tags/deployment-optimisation"},{"label":"Blue\u2013Green","permalink":"/blog/tags/blue-green"},{"label":"Canari","permalink":"/blog/tags/canari"},{"label":"Automation","permalink":"/blog/tags/automation"},{"label":"DevOps","permalink":"/blog/tags/dev-ops"}],"readingTime":4.13,"hasTruncateMarker":false,"authors":[{"name":"Bruno Pettersen-Coulombe","title":"Full stack Canadian: poutine cook & skating champion","url":"https://github.com/brunopc-net/","imageURL":"https://github.com/brunopc-net.png","key":"brunopc"}],"frontMatter":{"title":"After-hours work: red flag \ud83d\udea9","image":"20k-vs-200k-meme.webp","authors":"brunopc","enableComments":true,"tags":["Deployment-optimisation","Blue\u2013Green","Canari","Automation","DevOps"]},"nextItem":{"title":"Do you really need the complete stack?","permalink":"/blog/2023/07/25/Do-you-really-need-the-complete-stack"}},"content":"import EmployeeHopesSvg from \'./employees-hopes-McKinsey.svg\';\\n\\n![Job description](./Job-description.PNG)\\n\\nI was recently proposed a position as a Senior Software Engineer. Whether I\'ll get the job or not, I want to talk to you about something that never smells good: after-hours work. This is not for a startup or a product that rarely gets deployed; I\'m talking about a multibillion company that will need to deploy countless times in the future. This primitive, obsolete, and outdated approach is how many companies still operate: waiting until nobody can use our platform/service, then deploying it manually.\\n\\n## Why after-hour deployments are bad?\\n\\nFor two main reasons:\\n- [Repulsive for the best candidates](#repulsive-for-the-best-candidates)\\n- [Recurring fees](#recurring-fees)\\n\\n### Repulsive for the best candidates\\n\\nAfter the Covid-19 pandemic, [people have more expectation about their working conditions](https://insights-north-america.aon.com/enhancing-wellbeing/changing-expectations-how-the-pandemic-has-affected-what-employees-want-from-their-benefits-programs). For example, [51% of people are hoping for a better work-life balance](https://www.weforum.org/agenda/2021/05/employers-pandemic-covid-19-mental-health/). And they should be: it is the reasonable reality to expect given what technology permits in 2023.\\n\\n<a href=\\"https://www.mckinsey.com/capabilities/people-and-organizational-performance/our-insights/what-employees-are-saying-about-the-future-of-remote-work\\">\\n    <EmployeeHopesSvg />\\n</a>\\n\\nI\u2019m sure, as a responsible employer, that you are always searching for ways to improve the work-life balance of your employees, which, in turn, will give you the opportunity to attract the most competent candidates. However, all these efforts from your organization can be thrown out the window if you ask for your employees to do overtime time and time again. Manual deployment is a mentally taxing task for your employees - it drains mental energy without any real contribution to expertise.\\n\\nYou\u2019ll never be able to recruit A-grade employees that way. And if A grade employees avoid your organization, guess what? B-level employees that are looking to improve themselves will lack the guidance they need. What does employees do when they lose their momentum forward? They start looking elsewhere. So you\u2019ll be left with barely average C-grade employees.\\n\\n### Recurring Fees\\n\\nLet\u2019s say you need 3 hours of work, every month, with 8 people in the team, to deploy outside of operation hours, with a mean hourly cost of $60 x\xa01.5 = $80 an hour as it\u2019s overtime.\\n\\n$80 x 3 hours \xd7\xa08 employees x\xa012 deployments/year = $23,000/year.\\n\\nNow let\u2019s say you have 10 teams that are deploying like that, costs really adds up\u2026\\n\\nOf course, for some specific situation (POC, MVP, deployments 1\u20132 times a year, etc.), automated deployment doesn\u2019t make sense. For the rest of the projects, the cost of not doing it is far more important.\\n\\nMoreover, the more tasks the project requires, the more people you\u2019ll need. With the labor shortage, do you really think it\u2019s a good idea?\\n\\n## What are the advantages of live automated deployments?\\n\\n1. \ud83e\udd11 Avoiding paying overtime\\n2. \ud83d\ude4c Team spirit up: you\u2019ll have a big relief from your employees. Yes, they make more money with overtime, but do you think they really like that? \\n3. \ud83d\ude0e You\u2019ll be able to attract and retain the best candidates as they will be able to work at the level or their competence.\\n4. \ud83d\udc4c Ability to roll back to the previous version in a snap if anything goes wrong.\\n5. \ud83d\udca8 Faster deployments mean your team can ship new features quicker\\n6. \ud83d\ude4f More reliable deployments, as the critical human error will be out of the equation\\n7. \u23f0 As your deployment is not impacting availability, you can stay up 24/7\\n\\nAutomated deployments are one of the pillars of [DevOps](https://en.wikipedia.org/wiki/DevOps). If you can\u2019t deploy automatically, you can\u2019t pretend you\u2019re a DevOps team.\\n\\n## How to get started?\\n\\nTo deploy live, you\u2019ll need some expertise for the deployment techniques below:\\n\\n- A [*Blue-Green* deployment](https://docs.aws.amazon.com/whitepapers/latest/overview-deployment-options/bluegreen-deployments.html) is one deployment where you deploy the new version, without any pressure, on a duplicated infrastructure. You have all the time you need to, because guess what? It has zero impact on the real production yet. You can then run all the tests you need directly on the production code. As it is the exact same infrastructure that will be used in production, the replication will me perfect, so you\u2019ll avoid the \\"it works on my machine\\" situation. When your tests are done, you just have to redirect your traffic - via a [proxy server](https://en.wikipedia.org/wiki/Proxy_server) - to the new infrastructure. As this step takes literally a few milliseconds, it can be done live without service downtime.\\n\\n![It works on my machine comic](./It-work-on-my-machine.webp)\\n\\n- A [*Canari* deployment](https://cloud.google.com/deploy/docs/deployment-strategies/canary) is a even more evolved technique where you release your new production for a subset of your user base - it can be 1%, 5%, 10%, 25%, whatever you want. Basically, you\u2019re testing the new version from a user standpoint before rolling it out to all users.\\n\\nBoth methods give you the possibility to deploy during operation hours. It you\u2019re new to this, I suggest you start with Blue-Green, as it is easier to implement.\\n\\nThis is a big cultural shift, yes. But I suggest you calculate the upside of it. How many deployments a year you\u2019re doing? How much does it cost you in overtime work?"},{"id":"/2023/07/25/Do-you-really-need-the-complete-stack","metadata":{"permalink":"/blog/2023/07/25/Do-you-really-need-the-complete-stack","source":"@site/blog/2023-07-25-Do-you-really-need-the-complete-stack/index.md","title":"Do you really need the complete stack?","description":"Useful or useless?","date":"2023-07-25T00:00:00.000Z","formattedDate":"July 25, 2023","tags":[{"label":"Wordpress","permalink":"/blog/tags/wordpress"},{"label":"PHP","permalink":"/blog/tags/php"},{"label":"Jekyll","permalink":"/blog/tags/jekyll"},{"label":"Javascript","permalink":"/blog/tags/javascript"},{"label":"React","permalink":"/blog/tags/react"},{"label":"SSG","permalink":"/blog/tags/ssg"},{"label":"Docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":3.52,"hasTruncateMarker":false,"authors":[{"name":"Bruno Pettersen-Coulombe","title":"Full stack Canadian: poutine cook & skating champion","url":"https://github.com/brunopc-net/","imageURL":"https://github.com/brunopc-net.png","key":"brunopc"}],"frontMatter":{"title":"Do you really need the complete stack?","authors":"brunopc","tags":["Wordpress","PHP","Jekyll","Javascript","React","SSG","Docusaurus"],"image":"useful-or-useless.webp","enableComments":true},"prevItem":{"title":"After-hours work: red flag \ud83d\udea9","permalink":"/blog/2023/09/06/After-hours-work-is-a-red-flag"},"nextItem":{"title":"Welcome, folks","permalink":"/blog/welcome"}},"content":"![Useful or useless?](./useful-or-useless.webp)\\n\\nWhile thinking about this blog, my initial plan was to use [Wordpress](https://wordpress.com/). After all, I was familiar with the platform, having worked with PHP in the past. People generally dislike unnecessary changes, and I\'m no alien. However, upon reflecting on my past experiences with WordPress, I realized it had its drawbacks. It wasn\'t free since I had to purchase a web hosting plan and manage the hosting myself. Additionally, there were frequent updates and security vulnerabilities to patch. Although it seemed wonderful initially, over time, the operational burdens increased significantly. Eventually, I stopped blogging because it became costly in terms of both money and energy.\\n\\nAfter this reflection, I began searching for alternatives. Was there a better solution out there? That\'s when I came across [Jekyll](https://jekyllrb.com/) and decided to experiment with it. It appeared to be a great idea: no databases, no updates to worry about, just plain text content. The ability to post for free on Github Pages, with the option of a custom domain and without mandatory ads, was very appealing. It was simple, easy, and extremely stable. The very idea of just having to write plain-text Markdown files felt like using my new 1Zpresso k-Max grinder after years of using a cheap grinder from Amazon. It just worked, and marvelously well.\\n\\nThe idea of static site generators (SSGs) was so impressive that other SSGs started emerging. One such SSG was Docusaurus, based on the popular front-end framework React. Since I was more familiar with JavaScript/React than Ruby, I felt that React, as an HTML frontend framework on its own, integrated perfectly as an SSG. Moreover, the fact that Docusaurus was backed up by Meta gave me confidence that it would be supported for a long time. I decided to give Docusaurus a try. \\n\\n## CTCO - Cut the crap out\\n\\nAs humans, we can be peculiar at times. We try to solve one problem after another, but often, in doing so, we create more problems. Back then, I didn\'t need a database. Yes, it may have been \\"better\\" and \\"more technologically advanced\\" to use a DB instead of plain text HTML. However, in using a backend to manage the database, I needed a hosting plan. That hosting plan cost me money, which meant I had to work to pay for it. Essentially, I was working to buy myself more work. I did learn a lot, but I could have achieved more of what I really wanted at that time: establishing an online presence.\\n\\nHaving gained some experience in the industry now, I can say that many people tend to think that more is better. And it\'s not exclusive to software builders and managers. Asset manager Ben Carlson nailed it in his book [A Wealth of Common Sense](http://www.amazon.ca/gp/product/1119024927/ref=as_li_ss_tl?ie=UTF8&camp=15121&creative=390961&creativeASIN=1119024927&linkCode=as2&tag=canacoucpota-20). Dan Bortolotti explains it well in his Canadian Couch Potato blog, in the post [*Why Simple Is Still a Hard Sell*](https://canadiancouchpotato.com/2016/01/25/why-simple-is-still-a-hard-sell/):\\n\\n> Ben Carlson [\u2026] reveals that he\u2019s made the same discovery: investors resist simplicity. Yet Carlson believes it\u2019s the right solution for most of us. \u201cI\u2019ve spent my entire career working in portfolio management,\u201d he writes. \u201cThis experience has taught me that less is always more when making investment decisions. Simplicity trumps complexity. Conventional gives you much better odds than exotic.\u201d\\n\\n> A lot of complexity is just BS. \u201cComplexity tends to be the default option that gets used to persuade investors to buy unnecessary investment products,\u201d Carlson writes, \u201cwhile the vast majority of people really just need to understand more conventional options to succeed.\u201d When fund companies, media gurus and advisors peddle clever-sounding strategies, they\u2019re creating \u201can illusion of intelligence and control.\u201d\\n\\nI want to point out the fact that Software Engineering is still very immature. According to the [Standish Group Chaos Report 2020](https://vitalitychicago.com/blog/agile-projects-are-more-successful-traditional-projects/), only 42% of Agile projects and 13% of Waterfall projects were successful. In summary, the chances of a software project success (based on time, budget, target, goal, value, and user satisfaction) are still less than half, even when using agile methodologies And the more you simplify your solution, the lower the chances of complications.\\n\\nWhat is your real goal? Do you want an illusion of control, or resolving the problem?\\n\\nPersonally, I choose the latter."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","source":"@site/blog/2023-07-24-Welcome.md","title":"Welcome, folks","description":"I was contemplating for a while about creating my own blog.","date":"2023-07-24T00:00:00.000Z","formattedDate":"July 24, 2023","tags":[],"readingTime":1.205,"hasTruncateMarker":false,"authors":[{"name":"Bruno Pettersen-Coulombe","title":"Full stack Canadian: poutine cook & skating champion","url":"https://github.com/brunopc-net/","imageURL":"https://github.com/brunopc-net.png","key":"brunopc"}],"frontMatter":{"slug":"welcome","title":"Welcome, folks","authors":"brunopc","enableComments":true},"prevItem":{"title":"Do you really need the complete stack?","permalink":"/blog/2023/07/25/Do-you-really-need-the-complete-stack"}},"content":"I was contemplating for a while about creating my own blog.\\n\\nI like to write, as this form of communication is still the best we have to express an idea. Yes, spoken words have been increasing in popularity since podcasting became a thing. While I agree with Jordan Peterson that [spoken words are now more powerful then ever](https://www.youtube.com/watch?v=Dm9FaxV_RN4), written words still have advantages - they are much better indexed by web crawlers. Additionally, as you can refine them multiple times before publishing, words will always be the most precise and structured way to express an idea. This is especially useful when you\'re in a very detailed field like programming.\\n\\nA lot of developer blogs are written solely for other developers - a blog where you can find great code snippets, tutorials and such. However, developper blog targeted for a general audiance is far more rare. I think it\'s an angle that deserve to be better exploited - I\'ve seen countless exemple of miscommunication between developper, managers, HR or marketing advisors. Even though Software Engineering have been around for some decades now, I think it\'s still pretty immature as for the understanding of the field by related departments. There\'s a lot of people that are lacking some knowledge to optimise their work with software teams.\\n\\nThis is the beginning of a journey. I don\'t know where it\'s gonna take me but I\'m pretty sure it\'s gonna be great!\\n\\nLong live the internet."}]}')}}]);